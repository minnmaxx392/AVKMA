import subprocess
import pandas as pd
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QWidget, QDialog, QApplication, \
    QMessageBox
from Lib.Detect26 import Detect_file as Detect_file26, Detect_folder as Detect_folder26, \
    Classifier_file as Classifier_file26, Classifier_folder as Classifier_folder26, trichxuatJson as trichxuatJson26
from Lib.Detect144 import Detect_file as Detect_file144, Detect_folder as Detect_folder144, \
    Classifier_file as Classifier_file144, Classifier_folder as Classifier_folder144
from Lib.login import Ui_Dialog
from Lib.ketqua26 import SubWindow as SubWindow26
from Lib.ketqua144 import SubWindow as SubWindow144
from UI.admin_notify import Ui_Dialog as Admin_Dialog
from Lib.notification import Ui_Dialog as Json_Dialog
from Lib.solieu import Ui_Dialog as Solieu_Dialog
from UI.about import Ui_Dialog as About_Dialog
from UI.changeFunction import Ui_Dialog as Function_Dialog
from Lib.DetectServer import *
from Lib.changeModel26 import Ui_Form as change26_Form
from Lib.changeModel144 import Ui_Form as change144_Form

csv_file = "csvdata/dulieuchitiet.csv"

class Ui_MainWindow(object):

    # Chức năng đổi model cho phân nhóm và phân lớp mã độc
    def changeModel(self):
        if self.label0.text() == "Phân nhóm (categories) mã độc":
            self.window = QWidget()
            self.ui = change26_Form()
            self.ui.setupUi(self.window)
            self.window.show()
        elif self.label0.text() == "Phân lớp (families) mã độc":
            self.window = QWidget()
            self.ui = change144_Form()
            self.ui.setupUi(self.window)
            self.window.show()
        else:
            pass

    def get_label(self):
        return self.label0.text()

    # Hiển thị thông báo đổi Model thành công
    def openNotifyChangeFunction(self):
        self.window = QtWidgets.QDialog()
        self.ui = Function_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

        self.timer = QtCore.QTimer()
        self.timer.setSingleShot(True)
        self.timer.timeout.connect(self.closeDialog)
        self.timer.start(3000)

    # Chuyển sang chức năng phân nhóm mã độc kết nối tới server
    def changeServerCategory(self):
        self.label0.setText("Phân nhóm (categories) mã độc kết nối tới server")
        self.labelip.setVisible(True)
        self.label0.setGeometry(QtCore.QRect(150, 0, 600, 41))
        self.openNotifyChangeFunction()

    # Chuyển sang chức năng phân nhóm mã độc
    def changeLabelCategory(self):
        self.label0.setText("Phân nhóm (categories) mã độc")
        self.labelip.setVisible(False)
        self.label0.setGeometry(QtCore.QRect(250, 0, 400, 41))
        self.openNotifyChangeFunction()

    # Chuyển sang chức năng phân lớp mã độc
    def changeLabelFamily(self):
        self.label0.setText("Phân lớp (families) mã độc")
        self.labelip.setVisible(False)
        self.label0.setGeometry(QtCore.QRect(250, 0, 400, 41))
        self.openNotifyChangeFunction()

    # Chức năng mở app Train để tiếp tục train model
    def openTrain(self):
        try:
            subprocess.Popen("train.exe")
        except FileNotFoundError:
            print("Không tìm thấy ứng dụng train.")

    # Chức năng mở kết quả phân tích mã độc sau khi quét
    def openResult(self):
        if self.label0.text() == "Phân nhóm (categories) mã độc":
            self.window = QDialog()
            self.ui = SubWindow26()
            self.ui.setup_ui(self.window)
            self.window.show()
        elif self.label0.text() == "Phân lớp (families) mã độc":
            self.window = QDialog()
            self.ui = SubWindow144()
            self.ui.setup_ui(self.window)
            self.window.show()
        else:
            self.window = QDialog()
            self.ui = SubWindow26()
            self.ui.setup_ui(self.window)
            self.window.show()

    # Chức năng mở hộp thoại đăng nhập
    def openLoginDialog(self):
        self.window = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.window)
        self.ui.loginButton.clicked.connect(self.login)
        self.window.show()

    # Chức năng thông báo mở quyền Admin
    def openWindowAccept(self):
        self.window = QtWidgets.QDialog()
        self.ui = Admin_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

        self.timer = QtCore.QTimer()
        self.timer.setSingleShot(True)
        self.timer.timeout.connect(self.closeDialog)
        self.timer.start(3000)

    # Chức năng hiển thị About
    def openAbout(self):
        self.window = QtWidgets.QDialog()
        self.ui = About_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

    # Chức năng đóng hộp thoại
    def closeDialog(self):
        self.window.close()

    # Chức năng kiểm tra đăng nhập Admin
    def login(self):
        username = self.ui.username.text()
        password = self.ui.password.text()

        if username == "admin" and password == "admin":
            self.window.close()
            self.openWindowAccept()
            # Thay đổi các chức năng sau khi đăng nhập thành công Admin
            self.actionT_y_ch_nh_tham_s.setVisible(True)
            self.actionTr_ch_xu_t_Json.setVisible(True)
            self.actionThay_i_m_h_nh_ML_DL.setVisible(True)
            self.actionXem_th_ng_s_hu_n_luy_n.setVisible(True)
            self.huanluyentiep.setVisible(True)
            self.loginAdmin.setVisible(False)
        else:
            QtWidgets.QMessageBox.warning(self.window, "Login Failed", "Invalid username or password")

    # Chức năng trích xuất Json
    def trichxuatJson(self):
        try:
            file_dialog = QFileDialog()
            file_path, _ = file_dialog.getOpenFileName()
            trichxuatJson26(file_path)
            self.window = QtWidgets.QDialog()
            self.ui = Json_Dialog()
            self.ui.setupUi(self.window)
            self.window.show()

            self.timer = QtCore.QTimer()
            self.timer.setSingleShot(True)
            self.timer.timeout.connect(self.closeDialog)  # Kết nối với phương thức closeDialog khi timer kết thúc
            self.timer.start(3000)
        except Exception as e:
            print(f"Lỗi: {str(e)}")

    # Chức năng hiển thị số liệu mô hình
    def hienthisolieu(self):
        self.window = QtWidgets.QDialog()
        self.ui = Solieu_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

    # Cài đặt giao diện
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(767, 709)
        self.result_dialog = None
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label0 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label0.setGeometry(QtCore.QRect(250, 0, 400, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label0.setFont(font)
        self.label0.setObjectName("label0")
        self.labelip = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelip.setGeometry(QtCore.QRect(600, 20, 400, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.labelip.setFont(font)
        self.labelip.setObjectName("labelip")
        self.labelip.setVisible(False)
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 40, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(140, 100, 521, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50, 160, 461, 71))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(50, 240, 561, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setReadOnly(True)
        self.QscanButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.QscanButton.setGeometry(QtCore.QRect(330, 290, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.QscanButton.setFont(font)
        self.QscanButton.setObjectName("QscanButton")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 360, 201, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(160, 420, 281, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(160, 460, 351, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(160, 500, 341, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(160, 540, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.labelfiles = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelfiles.setGeometry(QtCore.QRect(550, 430, 100, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.labelfiles.setFont(font)
        self.labelfiles.setObjectName("labelfiles")
        self.labelbenign = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelbenign.setGeometry(QtCore.QRect(550, 470, 100, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.labelbenign.setFont(font)
        self.labelbenign.setObjectName("labelbenign")
        self.labelmalware = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelmalware.setGeometry(QtCore.QRect(550, 510, 100, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.labelmalware.setFont(font)
        self.labelmalware.setObjectName("labelmalware")
        self.labeltime = QtWidgets.QLabel(parent=self.centralwidget)
        self.labeltime.setGeometry(QtCore.QRect(550, 550, 100, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.labeltime.setFont(font)
        self.labeltime.setObjectName("labeltime")
        self.Qshowbutton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Qshowbutton.setGeometry(QtCore.QRect(270, 600, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Qshowbutton.setFont(font)
        self.Qshowbutton.setObjectName("Qshowbutton")
        self.Qfilebutton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Qfilebutton.setEnabled(True)
        self.Qfilebutton.setGeometry(QtCore.QRect(630, 230, 51, 51))
        self.Qfilebutton.setAutoFillBackground(False)
        self.Qfilebutton.setStyleSheet("")
        self.Qfilebutton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/file.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Qfilebutton.setIcon(icon)
        self.Qfilebutton.setIconSize(QtCore.QSize(50, 50))
        self.Qfilebutton.setAutoDefault(False)
        self.Qfilebutton.setObjectName("Qfilebutton")
        self.Qfolderbutton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Qfolderbutton.setGeometry(QtCore.QRect(690, 230, 51, 51))
        self.Qfolderbutton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("img/folder.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Qfolderbutton.setIcon(icon1)
        self.Qfolderbutton.setIconSize(QtCore.QSize(50, 50))
        self.Qfolderbutton.setObjectName("Qfolderbutton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 767, 26))
        self.menubar.setObjectName("menubar")
        self.menuAdmin = QtWidgets.QMenu(parent=self.menubar)
        self.menuAdmin.setObjectName("menuAdmin")
        self.menuAbout = QtWidgets.QMenu(parent=self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuHelp = QtWidgets.QMenu(parent=self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuFunction = QtWidgets.QMenu(parent=self.menubar)
        self.menuFunction.setObjectName("Function")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.servercategory = QtGui.QAction(parent=MainWindow)
        self.servercategory.setObjectName("servercategory")
        # Chuyển đổi sang chức năng phân nhóm mã độc kết nối tới server
        self.servercategory.triggered.connect(self.changeServerCategory)
        self.phanlopcategory = QtGui.QAction(parent=MainWindow)
        self.phanlopcategory.setObjectName("phanlopcategory")
        # Chuyển đổi sang chức năng phân nhóm mã độc
        self.phanlopcategory.triggered.connect(self.changeLabelCategory)
        self.phanlopfamily = QtGui.QAction(parent=MainWindow)
        self.phanlopfamily.setObjectName("phanlopfamily")
        # Chuyển đổi sang chức năng phân lớp mã độc
        self.phanlopfamily.triggered.connect(self.changeLabelFamily)
        self.loginAdmin = QtGui.QAction(parent=MainWindow)
        self.loginAdmin.setObjectName("loginAdmin")
        self.actionT_y_ch_nh_tham_s = QtGui.QAction(parent=MainWindow)
        self.actionT_y_ch_nh_tham_s.setObjectName("actionT_y_ch_nh_tham_s")
        # Mở hộp thoại đăng nhập
        self.loginAdmin.triggered.connect(self.openLoginDialog)
        self.actionTr_ch_xu_t_Json = QtGui.QAction(parent=MainWindow)
        self.actionTr_ch_xu_t_Json.setObjectName("actionTr_ch_xu_t_Json")
        # Tiến hành trích xuất file Json
        self.actionTr_ch_xu_t_Json.triggered.connect(self.trichxuatJson)
        self.actionThay_i_m_h_nh_ML_DL = QtGui.QAction(parent=MainWindow)
        self.actionThay_i_m_h_nh_ML_DL.setObjectName("actionThay_i_m_h_nh_ML_DL")
        self.actionXem_th_ng_s_hu_n_luy_n = QtGui.QAction(parent=MainWindow)
        # Chuyển đổi model
        self.actionThay_i_m_h_nh_ML_DL.triggered.connect(self.changeModel)
        self.actionXem_th_ng_s_hu_n_luy_n.setObjectName("actionXem_th_ng_s_hu_n_luy_n")
        # Hiển thị số liệu mô hình
        self.actionXem_th_ng_s_hu_n_luy_n.triggered.connect(self.hienthisolieu)
        self.huanluyentiep = QtGui.QAction(parent=MainWindow)
        self.huanluyentiep.setObjectName("huanluyentiep")
        # Mở ứng dụng tiếp tực Train
        self.huanluyentiep.triggered.connect(self.openTrain)
        self.menuAdmin.addAction(self.loginAdmin)
        self.menuAdmin.addAction(self.actionT_y_ch_nh_tham_s)
        self.actionT_y_ch_nh_tham_s.setVisible(False)
        self.menuAdmin.addAction(self.actionTr_ch_xu_t_Json)
        self.actionTr_ch_xu_t_Json.setVisible(False)
        self.menuAdmin.addAction(self.actionThay_i_m_h_nh_ML_DL)
        self.actionThay_i_m_h_nh_ML_DL.setVisible(False)
        self.menuAdmin.addSeparator()
        self.menuAdmin.addAction(self.actionXem_th_ng_s_hu_n_luy_n)
        self.actionXem_th_ng_s_hu_n_luy_n.setVisible(False)
        self.menuAdmin.addAction(self.huanluyentiep)
        self.huanluyentiep.setVisible(False)
        self.menuFunction.addAction(self.phanlopcategory)
        self.menuFunction.addAction(self.phanlopfamily)
        self.menuFunction.addAction(self.servercategory)
        self.menubar.addAction(self.menuAdmin.menuAction())
        self.menubar.addAction(self.menuFunction.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.actionAbout = QtGui.QAction(parent=MainWindow)
        self.actionAbout.setObjectName("About")
        self.menuHelp.addAction(self.actionAbout)
        # Mở About
        self.actionAbout.triggered.connect(self.openAbout)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "KMA Anti Malware Windows"))
        self.label0.setText(_translate("MainWindow", "Phân nhóm (categories) mã độc"))
        self.labelip.setText(_translate("MainWindow", "IP: 42.112.213.93"))
        self.label.setText(_translate("MainWindow", "Chọn mô hình"))
        self.comboBox.setItemText(0, _translate("MainWindow", "CNN Model"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Machine Learning Model"))
        self.label_3.setText(_translate("MainWindow", "Chọn đường dẫn"))
        # Mở hộp thoại chọn file
        self.Qfilebutton.clicked.connect(self.open_file_dialog)
        # Mở hộp thoại chọn folder
        self.Qfolderbutton.clicked.connect(self.open_folder_dialog)
        self.QscanButton.clicked.connect(self.nothing)
        self.QscanButton.setText(_translate("MainWindow", "Quét"))
        self.label_2.setText(_translate("MainWindow", "Kết quả chung"))
        self.label_4.setText(_translate("MainWindow", "Tổng số lượng file được quét:"))
        self.label_5.setText(_translate("MainWindow", "Số lượng file mã sạch được phát hiện:"))
        self.label_6.setText(_translate("MainWindow", "Số lượng file mã độc được phát hiện:"))
        self.label_7.setText(_translate("MainWindow", "Thời gian quét: "))
        self.labelfiles.setText(_translate("MainWindow", "0"))
        self.labelbenign.setText(_translate("MainWindow", "0"))
        self.labelmalware.setText(_translate("MainWindow", "0"))
        self.labeltime.setText(_translate("MainWindow", "0"))
        self.Qshowbutton.setText(_translate("MainWindow", "Hiện kết quả chi tiết"))
        # Mở bảng kết quả chi tiết
        self.Qshowbutton.clicked.connect(self.openResult)
        self.menuAdmin.setTitle(_translate("MainWindow", "Admin"))
        self.menuFunction.setTitle(_translate("MainWindow", "Function"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.loginAdmin.setText(_translate("MainWindow", "Login Admin"))
        self.servercategory.setText(_translate("MainWindow", "Phân lớp Category sử dụng model trên Server"))
        self.phanlopcategory.setText(_translate("MainWindow", "Phân lớp Category"))
        self.phanlopfamily.setText(_translate("MainWindow", "Phân lớp Family"))
        self.actionT_y_ch_nh_tham_s.setText(_translate("MainWindow", "Tùy chỉnh tham số"))
        self.actionTr_ch_xu_t_Json.setText(_translate("MainWindow", "Trích xuất Json"))
        self.actionThay_i_m_h_nh_ML_DL.setText(_translate("MainWindow", "Thay đổi mô hình ML, DL"))
        self.actionXem_th_ng_s_hu_n_luy_n.setText(_translate("MainWindow", "Xem thông số huấn luyện"))
        self.huanluyentiep.setText(_translate("MainWindow", "Tiếp tục huấn luyện"))
        self.actionAbout.setText(_translate("MainWindow", "About"))

    # Chức năng mở hộp thoại chọn file
    def open_file_dialog(self):
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName()
        self.QscanButton.clicked.disconnect()
        # Chuyển nút Quét sang chức năng quét file
        self.QscanButton.clicked.connect(self.Scan_file)
        if file_path:
            self.lineEdit.setText(file_path)

    def nothing(self):
        pass

    # Chức năng mở hộp thoại chọn folder
    def open_folder_dialog(self):
        folder_dialog = QFileDialog()
        folder_path = folder_dialog.getExistingDirectory()
        self.QscanButton.clicked.disconnect()
        # Chuyển nút Quét sang chức năng quét folder
        self.QscanButton.clicked.connect(self.Scan_folder)
        if folder_path:
            self.lineEdit.setText(folder_path)

    # Chức năng quét file
    def Scan_file(self):
        file_path = self.lineEdit.text()
        try:
            pefile.PE(file_path)
            if self.label0.text() == "Phân nhóm (categories) mã độc":
                if self.comboBox.currentIndex() == 0:
                    result, elapsed_time = Detect_file26(self.lineEdit.text())
                if self.comboBox.currentIndex() == 1:
                    result, elapsed_time = Classifier_file26(self.lineEdit.text())
                data = {
                    'STT': ["1"],
                    'File name': [f"{os.path.basename(self.lineEdit.text())}"],
                    'Category': [result[0]]
                }

                df = pd.DataFrame(data)
                df.to_csv(csv_file, index=False)

                if result[0] == "benign":
                    self.labelbenign.setText("1")
                    self.labelmalware.setText("0")
                    self.labelfiles.setText("1")
                    self.labeltime.setText(str(round(elapsed_time, 2)) + " s")
                else:
                    self.labelbenign.setText("0")
                    self.labelmalware.setText("1")
                    self.labelfiles.setText("1")
                    self.labeltime.setText(str(round(elapsed_time, 2)) + " s")
            elif self.label0.text() == "Phân lớp (families) mã độc":
                if self.comboBox.currentIndex() == 0:
                    result, elapsed_time = Detect_file144(self.lineEdit.text())
                if self.comboBox.currentIndex() == 1:
                    result, elapsed_time = Classifier_file144(self.lineEdit.text())
                data = {
                    'STT': ["1"],
                    'File name': [f"{os.path.basename(self.lineEdit.text())}"],
                    'Category': [result[0]]
                }
                df = pd.DataFrame(data)
                df.to_csv(csv_file, index=False)

                if result[0] == "benign":
                    self.labelbenign.setText("1")
                    self.labelmalware.setText("0")
                    self.labelfiles.setText("1")
                    self.labeltime.setText(str(round(elapsed_time, 2)) + " s")
                else:
                    self.labelbenign.setText("0")
                    self.labelmalware.setText("1")
                    self.labelfiles.setText("1")
                    self.labeltime.setText(str(round(elapsed_time, 2)) + " s")
            else:  # self.label0.text() == "Phân nhóm (categories) mã độc kết nối tới server":
                if self.comboBox.currentIndex() == 0:
                    result, elapsed_time = get_data_server_file(self.lineEdit.text())
                if self.comboBox.currentIndex() == 1:
                    result, elapsed_time = get_data_server_file(self.lineEdit.text())
                data = {
                    'STT': ["1"],
                    'File name': [f"{os.path.basename(self.lineEdit.text())}"],
                    'Category': [result]
                }

                df = pd.DataFrame(data)
                df.to_csv(csv_file, index=False)

                if 'Benign' in result:
                    self.labelbenign.setText("1")
                    self.labelmalware.setText("0")
                    self.labelfiles.setText("1")
                    self.labeltime.setText(str(round(elapsed_time, 2)) + " s")
                else:
                    self.labelbenign.setText("0")
                    self.labelmalware.setText("1")
                    self.labelfiles.setText("1")
                    self.labeltime.setText(str(round(elapsed_time, 2)) + " s")
        except Exception as e:
            print(str(e))
            app = QApplication.instance()  # Lấy đối tượng ứng dụng QApplication
            window = app.activeWindow()
            QMessageBox.warning(window, "Cảnh báo", "Đường dẫn không phải là tệp tin PE hoặc tên sai định dạng.")

    # Chức năng quét folder
    def Scan_folder(self):
        if self.label0.text() == "Phân nhóm (categories) mã độc":
            if self.comboBox.currentIndex() == 0:
                result, elapsed_time, file = Detect_folder26(self.lineEdit.text())
            if self.comboBox.currentIndex() == 1:
                result, elapsed_time, file = Classifier_folder26(self.lineEdit.text())

            file_names = [os.path.basename(filepath) for filepath in file]
            print(len(file_names))
            print(len(result))
            # Tạo DataFrame mới từ kết quả quét
            data = {
                'STT': range(1, len(result) + 1),
                'File name': file_names,
                'Category': result
            }
            df = pd.DataFrame(data)

            # Lưu DataFrame vào tệp CSV
            df.to_csv(csv_file, index=False)

            # Hiển thị thông tin trên giao diện
            benign = result.count('benign')
            malware = len(result) - benign
            total_files = len(result)

            self.labelbenign.setText(str(benign))
            self.labelmalware.setText(str(malware))
            self.labelfiles.setText(str(total_files))
            self.labeltime.setText(str(round(elapsed_time, 2)) + " s")
        elif self.label0.text() == "Phân lớp (families) mã độc":
            if self.comboBox.currentIndex() == 0:
                result, elapsed_time, file = Detect_folder144(self.lineEdit.text())
            if self.comboBox.currentIndex() == 1:
                result, elapsed_time, file = Classifier_folder144(self.lineEdit.text())

            file_names = [os.path.basename(filepath) for filepath in file]

            # Tạo DataFrame mới từ kết quả quét
            data = {
                'STT': range(1, len(result) + 1),
                'File name': file_names,
                'Category': result
            }
            df = pd.DataFrame(data)

            # Lưu DataFrame vào tệp CSV
            df.to_csv(csv_file, index=False)

            # Hiển thị thông tin trên giao diện
            benign = result.count('benign')
            malware = len(result) - benign
            total_files = len(result)

            self.labelbenign.setText(str(benign))
            self.labelmalware.setText(str(malware))
            self.labelfiles.setText(str(total_files))
            self.labeltime.setText(str(round(elapsed_time, 2)) + " s")
        else:
            if self.comboBox.currentIndex() == 0:
                result, elapsed_time, file = get_data_server_folder(self.lineEdit.text())
            if self.comboBox.currentIndex() == 1:
                result, elapsed_time, file = get_data_server_folder(self.lineEdit.text())

            file_names = [os.path.basename(filepath) for filepath in file]

            # Tạo DataFrame mới từ kết quả quét
            data = {
                'STT': range(1, len(result) + 1),
                'File name': file_names,
                'Category': result
            }

            df = pd.DataFrame(data)

            # Lưu DataFrame vào tệp CSV
            df.to_csv(csv_file, index=False)
            benign = 0
            malware = 0
            # Hiển thị thông tin trên giao diện
            for re in result:
                if 'Benign' in re:
                    benign += 1
                else:
                    malware += 1

            total_files = len(result)

            self.labelbenign.setText(str(benign))
            self.labelmalware.setText(str(malware))
            self.labelfiles.setText(str(total_files))
            self.labeltime.setText(str(round(elapsed_time, 2)) + " s")

def main():
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
