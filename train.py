# Form implementation generated from reading ui file 'UI/Train.ui'
#
# Created by: PyQt6 UI code generator 6.5.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from keras.utils import to_categorical
from sklearn.metrics import accuracy_score
from tensorflow.keras.utils import to_categorical

from Lib.Detect26 import *
import pandas as pd
import os
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QMessageBox

csv_file = "csvdata/data_train_new_26.csv"

def Fine_tuning(csv_file):
    # Load mô hình đã huấn luyện trước đó
    model_path = r"model/ModelCategoryDL/DL_Category.h5"
    data_train = pd.read_csv(csv_file)
    data_val = pd.read_csv(r"csvdata/split9.csv")
    data_test = pd.read_csv(r"csvdata/split10.csv")

    max_values_df = pd.read_csv("csvdata/max_data_new.csv")
    max_values_dict = max_values_df.set_index('Feature')['Max Value'].to_dict()

    SIZE = 27
    PADDING = 46

    x_train = data_train.drop(['file_name', 'label', 'category_name', 'category_encoding'], axis=1)
    y_train = data_train['category_encoding']

    x_val = data_val.drop(['file_name', 'label', 'category_name', 'category_encoding'], axis=1)
    y_val = data_val['category_encoding']

    x_test = data_test.drop(['file_name', 'label', 'category_name', 'category_encoding'], axis=1)
    y_test = data_test['category_encoding']

    y_train = np.array(y_train)  # Chuyển đổi y_train thành một mảng numpy
    y_train = np.where(y_train == '[0]', '0', y_train)  # Xử lý chuỗi '[0]' thành '0'

    model = load_model(model_path)

    for feature in x_train.columns:
        max_value = max_values_dict.get(feature, 1)
        if max_value == 0:
            x_train[feature] = 0
        else:
            x_train[feature] = x_train[feature] / max_value

    for feature in x_val.columns:
        max_value = max_values_dict.get(feature, 1)
        if max_value == 0:
            x_val[feature] = 0
        else:
            x_val[feature] = x_val[feature] / max_value

    for feature in x_test.columns:
        max_value = max_values_dict.get(feature, 1)
        if max_value == 0:
            x_test[feature] = 0
        else:
            x_test[feature] = x_test[feature] / max_value

    x_train_new = np.concatenate((x_train[:], np.zeros((x_train[:].shape[0], PADDING))), 1)
    x_val_new = np.concatenate((x_val[:], np.zeros((x_val[:].shape[0], PADDING))), 1)
    x_test_new = np.concatenate((x_test[:], np.zeros((x_val[:].shape[0], PADDING))), 1)

    x_train_new = x_train_new.reshape(x_train_new.shape[0], SIZE, SIZE, 1)
    x_val_new = x_val_new.reshape(x_val_new.shape[0], SIZE, SIZE, 1)
    x_test_new = x_test_new.reshape(x_val_new.shape[0], SIZE, SIZE, 1)

    y_train_new = to_categorical(y_train, 30)
    y_val_new = to_categorical(y_val, 30)
    y_test_new = to_categorical(y_test, 30)
    model.fit(x_train_new, y_train_new, epochs=5, batch_size=32, validation_data=(x_val_new, y_val_new))

    y_pred = model.predict(x_test_new)
    y_pred_classes = np.argmax(y_pred, axis=1)
    y_pred_one_hot = to_categorical(y_pred_classes, 30)
    print("Accuracy Score:", accuracy_score(y_test_new, y_pred_one_hot))

    model.save(r'model/New_model_retrain/DL_Category_retrain.h5')

def trainNewModel(folder_path):
    create_raw_data(csv_file)
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                pefile.PE(file_path)
                add_raw_data_virusshare(file_path, csv_file)
            except:
                pass
            # Thêm dữ liệu từ file vào file CSV

            # Chuẩn bị dữ liệu cho fine-tuning
    Fine_tuning(csv_file)


class Uii_Dialog(object):


    def openNotify(self):
        message_box = QMessageBox()
        message_box.setWindowTitle("Thông báo")
        message_box.setText(f"Đã huấn luyện thành công {self.countFiles()} tại folder có đường dẫn model/new_model_train!")
        message_box.adjustSize()
        message_box.exec()

    def countFiles(self):
        folder_path = self.lineEdit.text()
        file_count = 0
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                try:
                    pefile.PE(file_path)
                    file_count += 1
                except:
                    pass
        return file_count

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(594, 248)
        self.lineEdit = QtWidgets.QLineEdit(parent=Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(50, 90, 451, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setReadOnly(True)
        self.pushButton = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton.setGeometry(QtCore.QRect(520, 80, 51, 51))
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(r"img/folder.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(60, 60))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(parent=Dialog)
        self.label.setGeometry(QtCore.QRect(50, 50, 271, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(240, 170, 93, 41))

        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton.clicked.connect(self.open_folder_dialog)
        self.pushButton_2.clicked.connect(self.trainButton)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Huấn luyện tiếp"))
        self.label.setText(_translate("Dialog", "Chọn folder muốn huấn luyện"))
        self.pushButton_2.setText(_translate("Dialog", "Train"))

    def open_folder_dialog(self):
        folder_dialog = QFileDialog()
        folder_path = folder_dialog.getExistingDirectory()
        if folder_path:
            self.lineEdit.setText(folder_path)

    def trainButton(self):
        folder_path = self.lineEdit.text()
        trainNewModel(folder_path)
        self.openNotify()

if __name__ == "__main__":
    # import sys
    # app = QtWidgets.QApplication(sys.argv)
    # Dialog = QtWidgets.QDialog()
    # ui = Uii_Dialog()
    # ui.setupUi(Dialog)
    # Dialog.show()
    # sys.exit(app.exec())
    trainNewModel(r"F:\malware PE\VirusShare with label\Files Malware")